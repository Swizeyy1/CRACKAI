<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Floating Chatbot Assistant</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .page-content {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.9);
            padding: 40px;
            border-radius: 20px;
            backdrop-filter: blur(10px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        }
        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 20px;
            font-size: 2.5em;
        }
        p {
            color: #666;
            line-height: 1.8;
            margin-bottom: 20px;
            font-size: 1.1em;
        }
        /* Floating Bot Container */
        .floating-bot {
            position: fixed;
            bottom: 30px;
            right: 30px;
            z-index: 10000;
            cursor: grab;
            user-select: none;
        }
        .floating-bot:active {
            cursor: grabbing;
        }
        /* Bot Character */
        .bot-character {
            width: 80px;
            height: 80px;
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 10px 30px rgba(79, 172, 254, 0.3);
            transition: all 0.3s ease;
            animation: float 3s ease-in-out infinite;
            position: relative;
        }
        .bot-character:hover {
            transform: scale(1.1);
            box-shadow: 0 15px 40px rgba(79, 172, 254, 0.5);
        }
        .bot-character::before {
            content: 'ðŸ¤–';
            font-size: 35px;
            animation: bounce 2s ease-in-out infinite;
        }
        /* Floating Animation */
        @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
        }
        @keyframes bounce {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1); }
        }
        
        /* Chat Popup - THOUGHT BUBBLE SHAPE */
        .chat-popup {
            position: absolute;
            bottom: 80px; /* Adjust position for the new shape */
            right: 0px;
            width: 380px; /* Adjust width */
            height: 400px; /* Adjust height */
            opacity: 0;
            visibility: hidden;
            transform: translateY(20px) scale(0.9);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        }
        .chat-popup.active {
            opacity: 1;
            visibility: visible;
            transform: translateY(0) scale(1);
        }
        .chat-container {
            position: relative;
            width: 100%;
            height: 100%;
            filter: drop-shadow(0 10px 15px rgba(0,0,0,0.1));
        }
        .cloud-svg-shape {
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            z-index: 1;
        }
        
        /* Inner content wrapper */
        .chat-content-wrapper {
            position: absolute;
            top: 5%;
            left: 5%;
            width: 90%;
            height: 80%;
            z-index: 2;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            /* Use clip-path to ensure content stays within the SVG shape if needed, but border-radius is simpler */
            border-radius: 45% 45% 50% 50% / 60% 60% 40% 40%;
        }
        
        /* Chat Header */
        .chat-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            text-align: center;
            position: relative;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            flex-shrink: 0;
        }
        .chat-header h3 {
            margin: 0;
            font-size: 1.3em;
            font-weight: 600;
        }
        .close-btn {
            position: absolute;
            top: 50%;
            right: 15px;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
            opacity: 0.8;
            transition: opacity 0.3s ease;
        }
        .close-btn:hover {
            opacity: 1;
        }
        /* Chat Messages - Vertical Layout */
        .chat-messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 15px;
            background: #ffffff;
        }
        .message {
            display: flex;
            align-items: flex-end;
            gap: 10px;
            max-width: 85%;
            animation: fadeIn 0.4s ease;
        }
        .message.user {
            align-self: flex-end;
            flex-direction: row-reverse;
        }
        .message.bot {
            align-self: flex-start;
        }
        .message-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            flex-shrink: 0;
            background: #f1f1f1;
        }
        .message.user .message-avatar {
            background: #667eea;
            color: white;
        }
        .message-content {
            background: #f1f1f1;
            padding: 12px 16px;
            border-radius: 18px;
            font-size: 0.95em;
            word-wrap: break-word;
        }
        .message.user .message-content {
            background: #667eea;
            color: white;
            border-bottom-right-radius: 4px;
        }
        .message.bot .message-content {
            border-bottom-left-radius: 4px;
        }
        /* Thinking Indicator */
        .thinking-dots {
            display: flex;
            gap: 5px;
            align-items: center;
        }
        .thinking-dots span {
            width: 8px;
            height: 8px;
            background: #ccc;
            border-radius: 50%;
            animation: thinkingBounce 1.4s infinite ease-in-out both;
        }
        .thinking-dots span:nth-child(1) { animation-delay: -0.32s; }
        .thinking-dots span:nth-child(2) { animation-delay: -0.16s; }
        @keyframes thinkingBounce {
            0%, 80%, 100% { transform: scale(0); }
            40% { transform: scale(1.0); }
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        /* Chat Input */
        .chat-input {
            padding: 15px 20px;
            border-top: 1px solid #eee;
            background: #f9f9f9;
        }
        .input-container {
            display: flex;
            align-items: center;
            background: #fff;
            border-radius: 25px;
            padding: 6px;
            border: 1px solid #ddd;
        }
        .chat-input input {
            flex: 1;
            border: none;
            background: none;
            padding: 8px 12px;
            font-size: 1em;
            outline: none;
            color: #333;
        }
        .send-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            color: white;
            width: 38px;
            height: 38px;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
            transition: all 0.3s ease;
        }
        .send-btn:hover {
            transform: scale(1.1);
        }
        /* Notification Bubble */
        .notification {
            position: absolute;
            top: -5px;
            right: -5px;
            background: #ff4757;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            font-weight: bold;
            animation: pulse 2s infinite;
        }
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }
        /* Scrollbar Styling */
        .chat-messages::-webkit-scrollbar {
            width: 6px;
        }
        .chat-messages::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        .chat-messages::-webkit-scrollbar-thumb {
            background: #ccc;
            border-radius: 3px;
        }
        /* Mobile Responsiveness */
        @media (max-width: 768px) {
            .chat-popup {
                width: calc(100vw - 40px);
                height: 70vh;
                bottom: 100px;
                right: 0;
            }
            .floating-bot {
                bottom: 20px;
                right: 20px;
            }
        }
    </style>
</head>
<body>
    <!-- Page Content -->
    <div class="page-content">
        <h1>Welcome to My Website! ðŸŒŸ</h1>
        <p>This is a demo page showing how the floating chatbot works. The bot character in the bottom-right corner is fully draggable and interactive!</p>
        <p>Try clicking on the floating bot to open the chat window. You can drag it around the screen, send messages, and the bot will respond with helpful information.</p>
    </div>

    <!-- Floating Chatbot -->
    <div class="floating-bot" id="floatingBot">
        <div class="bot-character" id="botCharacter">
            <div class="notification" id="notification">1</div>
        </div>
        
        <!-- Chat Popup -->
        <div class="chat-popup" id="chatPopup">
            <div class="chat-container">
                <svg class="cloud-svg-shape" viewBox="0 0 200 150" xmlns="http://www.w3.org/2000/svg">
                    <path d="M178.5,95.5 C193.39,95.5 200,83.13 200,70 C200,52.5 186.5,45.5 174,45.5 C174,27 158.5,15.5 147.5,15.5 C136.5,15.5 124.5,22.5 120.5,33.5 C116.5,14.5 99,2.5 83,2.5 C61.5,2.5 48.5,21.5 48.5,38.5 C48.5,38.5 48.5,38.5 48.5,39 C26.5,41 11,56 11,73.5 C11,91 27,100.5 43.5,100.5 L100.5,100.5" fill="white" stroke="#4a4a4a" stroke-width="2"/>
                </svg>
                <div class="chat-content-wrapper">
                    <div class="chat-header">
                        <h3>ChatBot Assistant</h3>
                        <button class="close-btn" id="closeBtn">&times;</button>
                    </div>
                    <div class="chat-messages" id="chatMessages">
                        <!-- Messages will be added here -->
                    </div>
                    <div class="chat-input">
                        <div class="input-container">
                            <input type="text" id="messageInput" placeholder="Type your message..." maxlength="500">
                            <button class="send-btn" id="sendBtn">âž¤</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // DOM Elements
        const floatingBot = document.getElementById('floatingBot');
        const botCharacter = document.getElementById('botCharacter');
        const chatPopup = document.getElementById('chatPopup');
        const closeBtn = document.getElementById('closeBtn');
        const sendBtn = document.getElementById('sendBtn');
        const messageInput = document.getElementById('messageInput');
        const chatMessages = document.getElementById('chatMessages');
        const notification = document.getElementById('notification');

        // Dragging state
        let isDragging = false;
        let initialX, initialY; // Offset of mouse from top-left of element
        let startPos = { x: 0, y: 0 }; // Initial mouse position
        let dragDistance = 0;

        const botResponses = [
            "Thanks for your message! How can I assist you further?",
            "That's interesting! Tell me more about what you need help with.",
            "I'm here to help! Is there anything specific you'd like to know?",
            "Great question! Let me think about that for you.",
            "I appreciate you reaching out. What else can I help with?"
        ];

        function dragStart(e) {
            // Get initial mouse position to calculate total drag distance
            if (e.type === "touchstart") {
                startPos.x = e.touches[0].clientX;
                startPos.y = e.touches[0].clientY;
            } else {
                startPos.x = e.clientX;
                startPos.y = e.clientY;
            }

            // Get initial offset of mouse from the element's top-left corner
            const rect = floatingBot.getBoundingClientRect();
            initialX = startPos.x - rect.left;
            initialY = startPos.y - rect.top;

            dragDistance = 0;
            isDragging = false; // Will be set to true on the first mousemove event

            // Add listeners for the drag action
            document.addEventListener('mousemove', drag);
            document.addEventListener('touchmove', drag, { passive: false });
            document.addEventListener('mouseup', dragEnd);
            document.addEventListener('touchend', dragEnd);
        }

        function drag(e) {
            isDragging = true; // Confirms that the user is dragging
            e.preventDefault();

            let currentX, currentY;
            if (e.type === "touchmove") {
                currentX = e.touches[0].clientX;
                currentY = e.touches[0].clientY;
            } else {
                currentX = e.clientX;
                currentY = e.clientY;
            }

            // Calculate the new position of the bot element
            let newX = currentX - initialX;
            let newY = currentY - initialY;

            // Ensure the bot stays within the viewport
            const botWidth = floatingBot.offsetWidth;
            const botHeight = floatingBot.offsetHeight;
            newX = Math.max(0, Math.min(newX, window.innerWidth - botWidth));
            newY = Math.max(0, Math.min(newY, window.innerHeight - botHeight));

            floatingBot.style.left = newX + 'px';
            floatingBot.style.top = newY + 'px';
            floatingBot.style.right = 'auto';
            floatingBot.style.bottom = 'auto';

            // Calculate the total distance dragged from the start point
            const dx = currentX - startPos.x;
            const dy = currentY - startPos.y;
            dragDistance = Math.sqrt(dx * dx + dy * dy);
        }

        function dragEnd() {
            // Clean up event listeners
            document.removeEventListener('mousemove', drag);
            document.removeEventListener('touchmove', drag);
            document.removeEventListener('mouseup', dragEnd);
            document.removeEventListener('touchend', dragEnd);

            // If the bot was not dragged far, treat it as a click to open the chat
            if (dragDistance < 10) {
                toggleChat();
            }
        }

        function toggleChat() {
            chatPopup.classList.toggle('active');
            if (chatPopup.classList.contains('active')) {
                messageInput.focus();
                notification.style.display = 'none';
                if (chatMessages.childElementCount === 0) {
                     addMessage("Hello! How can I help you today?", false);
                }
            }
        }

        function addMessage(content, isUser) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${isUser ? 'user' : 'bot'}`;
            
            const avatar = isUser ? 'ðŸ‘¤' : 'ðŸ¤–';
            const text = content;

            messageDiv.innerHTML = `
                <div class="message-avatar">${avatar}</div>
                <div class="message-content">${text}</div>
            `;
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        function addThinkingIndicator() {
            const thinkingDiv = document.createElement('div');
            thinkingDiv.className = 'message bot';
            thinkingDiv.id = 'thinking';
            thinkingDiv.innerHTML = `
                <div class="message-avatar">ðŸ¤–</div>
                <div class="message-content">
                    <div class="thinking-dots">
                        <span></span><span></span><span></span>
                    </div>
                </div>
            `;
            chatMessages.appendChild(thinkingDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        function removeThinkingIndicator() {
            const thinkingDiv = document.getElementById('thinking');
            if (thinkingDiv) {
                thinkingDiv.remove();
            }
        }

        function sendMessage() {
            const messageText = messageInput.value.trim();
            if (messageText) {
                addMessage(messageText, true);
                messageInput.value = '';
                
                addThinkingIndicator();

                setTimeout(() => {
                    removeThinkingIndicator();
                    const randomResponse = botResponses[Math.floor(Math.random() * botResponses.length)];
                    addMessage(randomResponse, false);
                }, 1500 + Math.random() * 1000);
            }
        }

        // --- Event Listeners ---
        // Main listeners to initiate a drag or click
        botCharacter.addEventListener('mousedown', dragStart);
        botCharacter.addEventListener('touchstart', dragStart, { passive: false });
        
        // Listener for the close button
        closeBtn.addEventListener('click', (e) => {
             e.stopPropagation(); // Prevent the click from bubbling up to other elements
             toggleChat();
        });
        
        // Listeners for sending a message
        sendBtn.addEventListener('click', sendMessage);
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                sendMessage();
            }
        });
    </script>
</body>
</html>
